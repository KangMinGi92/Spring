<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd
		http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<!--서블릿에 @어노테이션으로 등록한 애들을 beans:property로 자등등록해주는 태그  -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!--@어노테이션 beans가 등록되어있으면 기본적으로 base-package에 등록된 경로를 통해 접근하게 만들어주는 태그  -->
	<context:component-scan base-package="com.bs.spring" />
	
	<!--
		pojo클래스 bean으로 등록하기
		<beans:bean>태그를 이용해서 등록
			속성
			id : context내에서 사용하는 bean이름
			class : 대상이 되는 클래스 지정(패키지명.클래스명)
	  -->
	<!-- Animal클래스를 default생성자로 생성해서 bean으로 등록 -->
	<!-- <beans:bean id="bbo" class="com.bs.spring.beantest.Animal"/> -->
	<!-- pojo 생성 시 setter를 이용해서 데이터를 넣어서 생성시키기  -->
<!-- 	<beans:bean id="bbo" class="com.bs.spring.beantest.Animal">
		beans:property name="필드명(변수명)" value="setter로 넣을값" 
		<beans:property name="name" value="뽀숑"/>
		<beans:property name="age" value="3"/>
		<beans:property name="height" value="50.4"/>
	</beans:bean> -->
	
	<!-- 매개변수있는 생성자를 이용해서 생성시키기 -->
	<beans:bean id="bbo" class="com.bs.spring.beantest.Animal">
		<!-- <beans:constructor-arg index="인덱스번호(0번부터)" value="넣을값"/> -->
		<beans:constructor-arg index="0" value="뽀숑"/>
		<beans:constructor-arg index="1" value="3"/>
		<!--매개변수 2개만 있는 생성자 이용하기 위해서 주석처리  -->
		<!-- <beans:constructor-arg index="2" value="50.4"/> -->
	</beans:bean>
	
	<beans:bean id="dog" class="com.bs.spring.beantest.Animal">
		<beans:property name="name" value="뽀삐"/>
	</beans:bean>
		
	<!-- 
		<beans:bean id="" class="" init-method="" destroy-method="">
		init-method는 실행할때 불러올 메소드설정
		destroy-method 종료할때 불러올 메소드설정
	 -->		
	<beans:bean id="emp" 
		class="com.bs.spring.beantest.Employee" 
		init-method="initialMethod" destroy-method="destroyMethod" >
		<beans:property name="name" value="최주영"/>
		<beans:property name="age" value="24"/>
		<beans:property name="address" value="경기도 안양시"/>
		<beans:property name="salary" value="100"/>
		<!-- <beans:property name="필드명" ref="참조할 beans:bean id=값"/> -->
		<beans:property name="dept" ref="dept"/>
	</beans:bean>
	
	<!--
		등록하는 bean이 다른클래스와 연관관계(참조)가 설정되어있을 때는
		다른 bean을 등록해야한다.
		ref속성을 이용해서 설정한다.  
	-->
	<beans:bean id="dept" class="com.bs.spring.beantest.Department">
		<beans:constructor-arg index="0" value="1"/>
		<beans:constructor-arg index="1" value="개발부"/>
		<beans:constructor-arg index="2" value="판교"/>
	</beans:bean>
	
	<beans:bean id="emp2" class="com.bs.spring.beantest.Employee">
		<beans:constructor-arg index="0" ref="dept"/>
	</beans:bean>
	
	<!--다른 xml파일을 참조해올수 있다.-->
	<!-- <beans:import resource=""/> -->
	
	<!-- 인터셉터등록하기 -->
	<interceptors>
		<interceptor>
			<mapping path="/demo/*"/>
			<!-- <exclude-mapping path="/demo/demo.do"/> -->
			<beans:bean class="com.bs.spring.common.interceptor.LoggerInterceptor"/>
		</interceptor>
		<interceptor>
			<mapping path="/demo/selectDemoAll.do"/>
			<beans:ref bean="loginCheck"/>
		</interceptor>
<!-- 		<interceptor>
			<mapping path="/memo/*"/>
			<beans:ref bean="loginCheck"/>
		</interceptor>
		<interceptor>
			<mapping path="/memo/*"/>
			<beans:ref bean="adminCheck"/>
		</interceptor> -->
		<interceptor>
			<mapping path="/board/*"/>
			<beans:ref bean="loginCheck"/>
		</interceptor>
	</interceptors>
	
	<beans:bean id="loginCheck" class="com.bs.spring.common.interceptor.LoginCheckInterceptor"/>
	<beans:bean id="adminCheck" class="com.bs.spring.common.interceptor.AdminCheckInterceptor"/>
	
	
	<!-- 
		파일 업로드를 처리할 resolver를 등록하자
		CommonsMultipartResolver클래스를 빈으로 등록
	 -->
	 
	 <beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	 	<beans:property name="maxUploadSize" value="104857600"/>
	 </beans:bean>
	
</beans:beans>
